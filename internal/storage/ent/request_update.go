// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"fume/internal/storage/ent/predicate"
	"fume/internal/storage/ent/request"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RequestUpdate is the builder for updating Request entities.
type RequestUpdate struct {
	config
	hooks    []Hook
	mutation *RequestMutation
}

// Where appends a list predicates to the RequestUpdate builder.
func (ru *RequestUpdate) Where(ps ...predicate.Request) *RequestUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetEndpoint sets the "endpoint" field.
func (ru *RequestUpdate) SetEndpoint(s string) *RequestUpdate {
	ru.mutation.SetEndpoint(s)
	return ru
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (ru *RequestUpdate) SetNillableEndpoint(s *string) *RequestUpdate {
	if s != nil {
		ru.SetEndpoint(*s)
	}
	return ru
}

// SetMethod sets the "method" field.
func (ru *RequestUpdate) SetMethod(s string) *RequestUpdate {
	ru.mutation.SetMethod(s)
	return ru
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (ru *RequestUpdate) SetNillableMethod(s *string) *RequestUpdate {
	if s != nil {
		ru.SetMethod(*s)
	}
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *RequestUpdate) SetCreatedAt(t time.Time) *RequestUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *RequestUpdate) SetNillableCreatedAt(t *time.Time) *RequestUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RequestUpdate) SetUpdatedAt(t time.Time) *RequestUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// Mutation returns the RequestMutation object of the builder.
func (ru *RequestUpdate) Mutation() *RequestMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RequestUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RequestUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RequestUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RequestUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RequestUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := request.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RequestUpdate) check() error {
	if v, ok := ru.mutation.Endpoint(); ok {
		if err := request.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`ent: validator failed for field "Request.endpoint": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Method(); ok {
		if err := request.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "Request.method": %w`, err)}
		}
	}
	return nil
}

func (ru *RequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(request.Table, request.Columns, sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Endpoint(); ok {
		_spec.SetField(request.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := ru.mutation.Method(); ok {
		_spec.SetField(request.FieldMethod, field.TypeString, value)
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(request.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(request.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{request.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RequestUpdateOne is the builder for updating a single Request entity.
type RequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RequestMutation
}

// SetEndpoint sets the "endpoint" field.
func (ruo *RequestUpdateOne) SetEndpoint(s string) *RequestUpdateOne {
	ruo.mutation.SetEndpoint(s)
	return ruo
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableEndpoint(s *string) *RequestUpdateOne {
	if s != nil {
		ruo.SetEndpoint(*s)
	}
	return ruo
}

// SetMethod sets the "method" field.
func (ruo *RequestUpdateOne) SetMethod(s string) *RequestUpdateOne {
	ruo.mutation.SetMethod(s)
	return ruo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableMethod(s *string) *RequestUpdateOne {
	if s != nil {
		ruo.SetMethod(*s)
	}
	return ruo
}

// SetCreatedAt sets the "created_at" field.
func (ruo *RequestUpdateOne) SetCreatedAt(t time.Time) *RequestUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableCreatedAt(t *time.Time) *RequestUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RequestUpdateOne) SetUpdatedAt(t time.Time) *RequestUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// Mutation returns the RequestMutation object of the builder.
func (ruo *RequestUpdateOne) Mutation() *RequestMutation {
	return ruo.mutation
}

// Where appends a list predicates to the RequestUpdate builder.
func (ruo *RequestUpdateOne) Where(ps ...predicate.Request) *RequestUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RequestUpdateOne) Select(field string, fields ...string) *RequestUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Request entity.
func (ruo *RequestUpdateOne) Save(ctx context.Context) (*Request, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RequestUpdateOne) SaveX(ctx context.Context) *Request {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RequestUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RequestUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RequestUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := request.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RequestUpdateOne) check() error {
	if v, ok := ruo.mutation.Endpoint(); ok {
		if err := request.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`ent: validator failed for field "Request.endpoint": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Method(); ok {
		if err := request.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "Request.method": %w`, err)}
		}
	}
	return nil
}

func (ruo *RequestUpdateOne) sqlSave(ctx context.Context) (_node *Request, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(request.Table, request.Columns, sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Request.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, request.FieldID)
		for _, f := range fields {
			if !request.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != request.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Endpoint(); ok {
		_spec.SetField(request.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Method(); ok {
		_spec.SetField(request.FieldMethod, field.TypeString, value)
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(request.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(request.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Request{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{request.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
